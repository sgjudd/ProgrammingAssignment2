my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data)<-cnames
my_data
add2 <- function(x,y){
x+y
}
add2(4,7)
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6++7
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(std, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Send" "help")
telegram("Send", "help")
telegram("Watson", "come", "here", "I need you.")
submit()
mad_libs(place = "Park", noun = "boat", adjective="cold")
submit()
"I" %p% "love" %p% "you"
"I" %p% "love" %p% "R!"
d1 <- Sys.date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time( > t1)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
pollutantmean("specdata","sulfate", 4:32)
source("pollutantmean")
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 4:32)
f
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 4:32)
pollutantmean("specdata","sulfate", 4:32)
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 4:32)
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 4:32)
?sprintf
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 4:32)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 4:32)
d
d<-pollutantmean("specdata","sulfate", 4:6)
d
d<-pollutantmean("specdata","sulfate", 4)
d
d[1:50]
d[1]
d[[1]]
summary(d)
summary(d[[1]][,1:3])
d<-pollutantmean("specdata","sulfate", 1:10)
summary(d[[1]][,1:3])
class(d)
attributes(d)
d[2]
d<-pollutantmean("specdata","sulfate", 23)
summary(d[[1]][,1:3])
summary(d["nitrate"])
mean(d[[3]])
mean(d[[2]])
d<-pollutantmean("specdata","sulfate", 23)
mean(d[[3]])
mean(d[[1]])
mean(d[["nitrate"]])
mean(d[3])
class(d)
mean(d[,3])
mean(d[3])
mean(d[[3]])
d[[3]]
d
d[1:10]
printHead(d)
head(d, n=10)
head(d, n=1)
head(d, 1)
d[1:10,]
?lapply
str(d)
d<-pollutantmean("specdata","sulfate", 23:24)
str(d)
mean(d[[1]][,3])
mean(d[[1]]$nitrate)
mean(d[1]$nitrate)
mean(d[[1]]$ID)
mean(d[[2]]$ID)
mean(d[[1:2]]$ID)
mean(d[[<3]]$ID)
install.packages("dpylr")
d[c(1,1)]
d[[c(1,1)]]
mean(d[[c(1,3)]])
mean(d[[c(1,2)]])
mean(d[[c(1,1)]])
mean(!is.na(d[[c(1,3)]])
)
d<-pollutantmean("specdata","sulfate", 23)
mean(!is.na(d[[c(1,3)]]))
mean(!is.na(d[[c(1,2)]]))
good <-!is.na(d[[c(1,2)]]))
good <-!is.na(d[[c(1,2)]])
good
mean(!is.na(d[[c(1,good)]]))
mean(d[[c(good,2)]])
mean(d[[good,2]])
f <-read.csv("specdata/001.csv")
f
class(f)
head(f,3)
mean(f["sulfate"])
summary(f)
f <-read.csv("specdata/023.csv")
summary(f)
d<-pollutantmean("specdata","sulfate", 23:30)
dt<-rbind(d)
class(dt)
head(d, 4)
mean(dt[["nitrate"]])
mean(dt["nitrate"])
mean(dt[4])
mean(dt[[,4]])
mean(dt[[,4]])
dt<-rbind(d)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(dt)
head(dt)
head.matrix(dt)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
clss(d)
class(d)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(d)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(d)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(d)
d
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(d)
class(d[1])
summary(d)
source("pollutantmean.R")
d<-pollutantmean("specdata","sulfate", 23:30)
class(d)
head(d)
d<-pollutantmean("specdata","sulfate", 1:10)
mean(d["sulfate"])
names(d)
mean(d[,"sulfate"])
mean(d$sulfate)
d$sulfate
?mean
mean(d$sulfate, na.rm = TRUE)
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate", 1:10)
pollutantmean("specdata","nitrate", 70:72)
pollutantmean("specdata","nitrate", 23)
source("complete.R")
complete("specdata", 23)
source("complete.R")
complete("specdata", 23)
source("complete.R")
source("complete.R")
c<-source("complete.R")
c
c<-complete("specdata", 23)
c
source("complete.R")
c<-complete("specdata", 23)
source("complete.R")
c<-complete("specdata", 23)
source("complete.R")
c<-complete("specdata", 23:30)
source("complete.R")
c<-complete("specdata", 23:30)
source("complete.R")
c<-complete("specdata", 23:30)
?nrow
source("complete.R")
c<-complete("specdata", 23:30)
source("complete.R")
c<-complete("specdata", 23:30)
source("complete.R")
c<-complete("specdata", 23:30)
c<-complete("specdata", 1)
c<-complete("specdata", c(2,4,8,10,12))
source("complete.R")
c<-complete("specdata", 1)
c<-complete("specdata", c(2,4,8,10,12))
c<-complete("specdata", 30:25
)
c<-complete("specdata", 3)
complete("specdata", 3)
source("complete.R")
c<-complete("specdata", 3)
c
source("complete.R")
source("complete.R")
complete("specdata", 3)
c<-complete("specdata", 30:25)
c
?cor
source("corr.R")
cr <-corr("specdata", 150)
source("corr.R")
cr <-corr("specdata", 150)
source("corr.R")
cr <-corr("specdata", 150)
cr
cr <-corr("specdata", 150)
source("corr.R")
cr <-corr("specdata", 150)
source("corr.R")
cr <-corr("specdata", 150)
summary(cr)
source("corr.R")
cr <-corr("specdata", 150)
summary(cr)
source("corr.R")
cr <-corr("specdata", 150)
summary(cr)
cr <-corr("specdata", 400)
head(cr)
summary(cr)
cr <-corr("specdata", 5000)
summary(cr)
length(cr)
cr <-corr("specdata")
summary(cr)
source("corr.R")
cr <-corr("specdata", 5000)
summary(cr)
cr <-corr("specdata")
summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <-sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <-sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <-sort(cr)
print(c(n, round(cr, 4)))
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vector <-sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_collors <- flags{, 11:17}
flag_colors <- flags{, 11:17}
flag_colors <- flags[], 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply[flag_shapes,range]
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
mean(iris$Sepal.Length)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
library(datasets)
data("mtcars")
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429 - 82.63636
debug(ls)
ls
?ls
ls(0)
ls(0)
mean(iris$Sepal.Length)
ok()
iris
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
iris
library(datasets)
data("iris")
tapply(iris$Sepal.length,iris$species,mean)
mapply(iris$Sepal.length,iris$species,mean)
mapply(iris$Sepal.mean)
mapply(iris$Sepal,mean)
apply(iris$Sepal,mean)
s <- split(iris, iris$Species)
s
colMeans(s$virginica)
apply(s$virginica,mean)
apply(s$virginica[2],mean)
mean(s$virginica[1])
mean(s$virginica[2])
sapply(s, function(x){colMeans(x[, "Sepal.Length"])})
sapply(s, function(x){colMeans(x[, "Sepal.Length","Sepal.Width"])})
sapply(s, function(x){colMeans(x[, c("Sepal.Length","Sepal.Width")])})
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 - 82.63636
lwd
wd
cwd
m1 <- matrix(1:6, nrow = 2, ncol = 3)
m1
makeCacheMatrix(m1)
source("makeCacheMatrix")
source("makeCacheMatrix.R")
source("ProgrammingAssignment2/makeCacheMatrix.R")
setwd("~/R/ProgrammingAssignment2")
source("makeCacheMatrix.R")
source("cacheMatrix.R")
makeCacheMatrix(m1)
m2 <- makeCacheMatrix(m1)
m2
m2.get()
get() m2
m2$x
m2.x
m1
m2
get(m2)
get()
m2 <- makeCacheMatrix(m1)
m2(m1)
makeCacheMatrix(m1)
get(m1)
m2$get()
m2$getinverted()
source("cacheMatrix.R")
m2 <- makeCacheMatrix(m1)
m2$getinverted()
m2$getinverted()
source("cacheMatrix.R")
m2 <- makeCacheMatrix(m1)
m2$getinverted()
cacheSolve(m2)
cacheSolve(m2)
source("cacheMatrix.R")
cacheSolve(m2)
m2$getinverted()
m3 <- makeCacheMatrix(m1)
m3$get()
m3$getinverted()
cacheSolve(m3)
m3$getinverted()
source("cacheMatrix.R")
m3 <- makeCacheMatrix(m1)
m3$getinverted()
cacheSolve(m3)
